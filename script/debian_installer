#!/bin/bash
set -euo pipefail


# todo:
# check for umask 0022
# check for chmod 644 /etc/resolv.conf in host sys (apt needs this)
# add check for numfmt, parted, mkfs.ext4, perl
# add check for /usr/share/keyrings/debian-archive-keyring.gpg
# add check for mount to be from util-linux, not busybox
# disable "ERROR: label prefix 'main' already exists" if the disk is about to be purged
# handle case when no purge and no partition table on disk (now it's an error)
# list all deps if one is missing
# encrypt and yes should be exclusive (password needed)

usage() {
  echo "usage: dev_install [ARGS]

-t, --target <path>   path to target disk device, LVM volume group name, or file

-i, --iface           interface for default gateway
-s, --static-ip       use static ip (with netmask suffix), instead of dhcp
-g, --static-gw       use static gateway ip
-l, --label           prefix for LVM logical volumes, partitions, encrypted
                      devices, and filesystems; also a hostname
-k, --public-key      path to a public ssh key file to include in image
-y, --yes             don't ask for permission to continue

-e, --encrypt-home    encrypt home partition
-w, --encrypt-root    encrypt whole root partition
-p, --purge-all       remove all existing partitions from device (default is to
                      create new partitions on existing free disk space)
-u, --uefi            force uefi install

-b, --boot-size       boot partition size
-r, --root-size       root partition size
-h, --home-size       home partition size (omit if not defined)
-v, --var-size        var partition size (omit if not defined)

--boot-part           existing boot partition path to utilize
--root-part           existing root partition path to utilize
--home-part           existing home partition path to utilize
--var-part            existing var partition path to utilize

--kali                install kali instead of debian

--help                this help message

examples:

./debian_installer -t /dev/sdz -b 512M -r 128G
./debian_installer -t /dev/sdz -b 512M -r 64G -u 32G -v 32G -p
./debian_installer -t /dev/sdz -b 1G -r 64G --boot-part=/dev/sdz1 --root-part=/dev/sdz2"
./debian_installer -t ~/dummy_vm.img -i enp1s0 -l dummy-1 -k ~/.ssh/authorized_keys -b 128M -r 4G
  exit 0
}

# just a helper function defined early
err_exit() {
  printf 'ERROR: %s\n' "${1}"
  exit 1
}


# initilize global variables
# ==========================

# target - a path to the disk or file
DEV=

# main network interface
IFACE=

# static ip for the interface
STATIC_IP=

# static gateway ip for the interface
STATIC_GW=

# public ssh key to put in authorized_hosts
PUB_SSH_FILE=

# don't ask to continue
YES=false

# encrypt the home partition
ENCRYPT_HOME=false

# encrypt the whole root partition
ENCRYPT_ROOT=false

# remove all existing partitions
PURGE=false

# force uefi
UEFI_FORCE=false


# size of partitions and total size
BOOT_SIZE=
ROOT_SIZE=
HOME_SIZE=
VAR_SIZE=
BOOT_SIZE_B=
ROOT_SIZE_B=
HOME_SIZE_B=
VAR_SIZE_B=
SIZE=

# path of existing partitions to use
GRUB_PART=
BOOT_PART=
ROOT_PART=
HOME_PART=
VAR_PART=
BOOT_PART=

# partition numbers
GRUB_PART_N=
BOOT_PART_N=
ROOT_PART_N=
HOME_PART_N=
VAR_PART_N=

# default path to mount partitions
readonly ROOT_DIR=/tmp/deb_build

# tmp dir to extract files
readonly TMP_DIR=/tmp/deb_build_tmp

# LV containing efi system partition
BOOT_DISK=

# type of the disk: 'device' (path to /dev/*), 'volume_group' (LVM volume group
# name), or 'file' (path to a regular file)
DEV_TYPE=

# bootloader install type: 'bios' 'or' 'uefi'
INST_TYPE=

# first free loop device to use for dev_type 'file'
LOOP_DEV=

# prefix for labeling partitions and filesystems
LABEL=

# label, but with dashes converted to underscores
LABEL_UNDER=

# dev mapper name for encrypted home or root
MAP_DEV=

command -v uuidgen >/dev/null || err_exit 'uuidgen from uuid-runtime missing'

# UUIDs for partitions to be created, either generated by the script or read
# from the sys config files
UUID_GRUB="$(uuidgen | sed 's|.*-.*-.*-.*-.\{4\}|00000000-0000-0000-0000-0000|')"
UUID_BOOT="$(uuidgen | sed 's|.*-.*-.*-.*-.\{4\}|00000000-0000-0000-0000-0000|')"
UUID_BOOT_FAT="$(rev <<< ${UUID_BOOT} | cut -c 1-8 | rev)"
UUID_ROOT="$(uuidgen | sed 's|.*-.*-.*-.*-.\{4\}|00000000-0000-0000-0000-0000|')"
UUID_HOME="$(uuidgen | sed 's|.*-.*-.*-.*-.\{4\}|00000000-0000-0000-0000-0000|')"
UUID_VAR="$(uuidgen | sed 's|.*-.*-.*-.*-.\{4\}|00000000-0000-0000-0000-0000|')"

# chroot command interpreter
CCMD="chroot ${ROOT_DIR} env -i DEBIAN_FRONTEND=noninteractive TERM=linux PATH=/usr/bin:/usr/sbin"

# repositories for apt: main contrib non-free non-free-firmware
APT_REPOS='main'

# install kali
KALI='false'


# parse args
# ==========

opts=t:i:s:g:l:k:yewpub:r:h:v:

long=target:,iface:,static-ip:,static-gw:,label:,public-key:,yes,encrypt-home,encrypt-root,purge-all,
long+=uefi,
long+=boot-size:,root-size:,home-size:,var-size:,
long+=boot-part:,root-part:,home-part:,var-part,kali,help

parsed_opts=$(getopt -o=${opts} --long=${long} --name "$0" -- "$@")

while [[ ${#} -gt 0 ]]; do
  key="${1}"
  case ${key} in
  -t | --target)
    readonly DEV="${2}"
    shift 2
    ;;
  -i | --iface)
    readonly IFACE="${2}"
    shift 2
    ;;
  -s | --static-ip)
    readonly STATIC_IP="${2}"
    shift 2
    ;;
  -g | --static-gw)
    readonly STATIC_GW="${2}"
    shift 2
    ;;
  -l | --label)
    readonly LABEL="${2}"
    readonly LABEL_UNDER="$(echo ${LABEL} | tr - _)"
    shift 2
    ;;
  -k | --public-key)
    readonly PUB_SSH_FILE="${2}"
    shift 2
    ;;
  -y | --yes)
    readonly YES=true
    shift
    ;;
  -e | --encrypt-home)
    readonly ENCRYPT_HOME=true
    shift
    ;;
  -w | --encrypt-root)
    readonly ENCRYPT_ROOT=true
    shift
    ;;
  -p | --purge-all)
    readonly PURGE=true
    shift
    ;;
  -u | --uefi)
    readonly UEFI_FORCE=true
    shift
    ;;
  -b | --boot-size)
    BOOT_SIZE_B="$(numfmt --from=iec "${2}")"
    readonly BOOT_SIZE_B
    readonly BOOT_SIZE="${2}"
    shift 2
    ;;
  -r | --root-size)
    ROOT_SIZE_B="$(numfmt --from=iec "${2}")"
    readonly ROOT_SIZE_B
    readonly ROOT_SIZE="${2}"
    shift 2
    ;;
  -h | --home-size)
    HOME_SIZE_B="$(numfmt --from=iec "${2}")"
    readonly HOME_SIZE_B
    readonly HOME_SIZE="${2}"
    shift 2
    ;;
  -v | --var-size)
    VAR_SIZE_B="$(numfmt --from=iec "${2}")"
    readonly VAR_SIZE_B
    readonly VAR_SIZE="${2}"
    shift 2
    ;;
  --boot-part)
    readonly BOOT_PART="${2}"
    shift 2
    ;;
  --root-part)
    readonly ROOT_PART="${2}"
    shift 2
    ;;
  --home-part)
    readonly HOME_PART="${2}"
    shift 2
    ;;
  --var-part)
    readonly VAR_PART="${2}"
    shift 2
    ;;
  --kali)
    readonly KALI='true'
    shift
    ;;
  --help)
    usage
    ;;
  *)
    err_exit "unknown option '${key}'"
    ;;
  esac
done

if [ ${ENCRYPT_ROOT} == 'true' ]; then
  MAP_DEV=${LABEL_UNDER}_root_crypt
elif [ ${ENCRYPT_HOME} == 'true' ]; then
  MAP_DEV=${LABEL_UNDER}_home_crypt
fi

PART_ENC="/dev/mapper/${MAP_DEV}"

if [[ -z "${IFACE}" ]]; then
    err_exit 'no network interface defined'
fi

# todo: check if both static ip and gw are defined and ip has a netmask suffix

if [[ -z "${DEV}" ]]; then
  if [[ -z "${BOOT_PART}" ]] || [[ -z "${ROOT_PART}" ]] ; then
    err_exit 'missing target device or root+boot partition paths'
  fi
else
  if [[ -n "${BOOT_PART}" ]] || [[ -n "${ROOT_PART}" ]] ; then
    err_exit "either target device or root+boot partition paths must be defined"
  fi
fi

# todo: add test for root encryption to exclude separate var and home parts
# todo: add a test for MAP_DEV mapper device name existing
# todo: add a check for mkfs.fat if uefi from dosfstools
# todo: add a check for debootstrap

if [[ "${DEV}" =~ /dev/[sn].* ]]; then
  DEV_TYPE='device'

elif [ -z "${DEV}" ]; then
  dm=/dev/mapper/*
  if [[ "${BOOT_PART}" == ${dm} ]] && [[ "${ROOT_PART}" == ${dm} ]]; then
    DEV_TYPE='volume_group'
  elif [[ "${BOOT_PART}" == ${dm} ]] || [[ "${ROOT_PART}" == ${dm} ]]; then
    err_exit "both boot and root partitions need to be on '/dev/mapper/' path"
  else
    DEV_TYPE='device'
  fi

else
  if vgs "${DEV}" >/dev/null 2>&1; then
    DEV_TYPE='volume_group'
  else
    DEV_TYPE='file'
  fi
fi

SIZE="$(( BOOT_SIZE_B + ROOT_SIZE_B + HOME_SIZE_B + VAR_SIZE_B ))"

# make sure that these global vars are readonly from now on
readonly DEV PUB_SSH_FILE ENCRYPT_HOME ENCRYPT_ROOT PURGE \
  BOOT_SIZE ROOT_SIZE HOME_SIZE VAR_SIZE SIZE \
  ROOT_DIR DEV_TYPE \
  UUID_GRUB UUID_BOOT UUID_BOOT_FAT UUID_ROOT UUID_HOME UUID_VAR \
  KALI


# tests and checks
# ================

command -v sgdisk >/dev/null || err_exit 'sgdisk from gdisk missing'
command -v partprobe  >/dev/null || err_exit 'partprobe from parted missing'

if [ "${INST_TYPE}" == 'uefi' ]; then
  command -v mkfs.fat  >/dev/null || err_exit 'mkfs.fat from dosfstools missing'
fi

[[ -z "${BOOT_SIZE}" ]] && err_exit 'boot partition size not defined'
[[ -z "${ROOT_SIZE}" ]] && err_exit 'root partition size not defined'

[[ -z "${LABEL}" ]] && err_exit 'label prefix not defined'

blkid -s PARTLABEL -o value \
  | grep -q \
    -e ${LABEL}-grub \
    -e ${LABEL}-boot \
    -e ${LABEL}-root \
    -e ${LABEL}-home \
    -e ${LABEL}-var \
  && err_exit "label prefix '${LABEL}' already exists"

findmnt "${ROOT_DIR}" && err_exit "${ROOT_DIR} already mounted"
[ "${ROOT_DIR}" == '' ] && err_exit "ROOT_DIR is empty"
[ "${ROOT_DIR}" == '/' ] && err_exit "/ as ROOT_DIR not allowed"

if [ "${DEV_TYPE}" == 'file' ]; then
  command -v qemu-img >/dev/null || err_exit 'qemu-img from qemu-utils missing'
fi

if [ "${DEV_TYPE}" == 'volume_group' ] && [ -n "${DEV}" ]; then
  lvdisplay \
  | grep '  LV Name  ' \
  | grep -q \
    -e ${LABEL_UNDER}_grub \
    -e ${LABEL_UNDER}_boot \
    -e ${LABEL_UNDER}_root \
    -e ${LABEL_UNDER}_home \
    -e ${LABEL_UNDER}_var \
  && err_exit "logical volumes with prefix '${LABEL_UNDER}' already exist"

  if [[ ${DEV} == *-* ]]; then
    err_exit "volume group name can't have a dash in it"
  fi

  if [[ ${DEV} == *_* ]]; then
    err_exit "volume group name can't have an underscore in it"
  fi

  if [[ ${PURGE} == 'true' ]]; then
    err_exit "can't purge a volume group, please remove it manually"
  fi
fi


# functions
# =========

get_free_space() {
  if [ "${DEV_TYPE}" == 'file' ] || [ -z "${DEV}" ]; then
    return
  fi

  if [ "${DEV_TYPE}" == 'device' ]; then
    FREE_SPACE="$(parted "${DEV}" unit B print free \
      | grep 'Free Space' \
      | tail -n1 \
      | awk '{print $3}' \
      | tr -d 'B')"

  elif [ "${DEV_TYPE}" == 'volume_group' ]; then
    FREE_SPACE="$(vgs "${DEV}" --units=B --rows \
      | grep 'VFree ' \
      | awk '{print $2}' \
      | tr -d 'B')"
  fi

  if [[ -z "${FREE_SPACE}" ]]; then
    err_exit "target disk probably doesn't have partition table"
  fi

  if [[ "${FREE_SPACE}" -lt "${SIZE}" ]]; then
    err_exit "not enough unpartitioned space"
  fi

  readonly FREE_SPACE
}

get_kali_keyring() {
  local pkg
  pkg="$(curl -s http://http.kali.org/pool/main/k/kali-archive-keyring/ \
    | grep '"kali-archive-keyring_.*_all\.deb" ' \
    | cut -d'"' -f4)"
  mkdir -p ${TMP_DIR}
  wget -q "https://http.kali.org/pool/main/k/kali-archive-keyring/${pkg}" \
    -O "${TMP_DIR}/${pkg}"
  dpkg -x "${TMP_DIR}/${pkg}" ${TMP_DIR}/
}

partsync() {
  case "${DEV_TYPE}" in
  'file'|'device' )
    partprobe "${DEV}"
    ;;
  'volume_group' )
    partprobe "${BOOT_DISK}"
    ;;
  esac
  sleep 0.5
}

purge_partitions() {
  echo '+ purging existing partitions...'
  sgdisk --zap-all "${DEV}" && partsync
  dd if=/dev/zero of="${DEV}" bs=1M count=128 >/dev/null 2>&1
  sgdisk -g "${DEV}" && partsync
  sleep 0.5
}

get_partitions() {
  case "${DEV_TYPE}" in
  'device' )
    # find partition numbers to use only if partitions are not defined and the
    # device is defined
    if [[ -z "${DEV}" ]]; then
      INST_TYPE='uefi'
      return
    fi

    partsync
    local last_part
    last_part="$(sgdisk -p "${DEV}" \
      | sed -n '/^Number/,$p' \
      | tail -n +2 \
      | sort -n \
      | awk '{print $1}' \
      | tail -n1 \
      2> /dev/null)"

    if [[ -z "${last_part}" ]] || [ "${PURGE}" == 'true' ]; then
      last_part=0
      INST_TYPE='bios'
    else
      INST_TYPE='uefi'
    fi

    if [ "${UEFI_FORCE}" == 'true' ]; then
      INST_TYPE='uefi'
    fi

    # add 'p' in /dev/nvme partitions
    local disk_dev
    if [[ ${DEV} =~ /dev/nvme* ]]; then
      disk_dev="${DEV}p"
    else
      disk_dev="${DEV}"
    fi

    if [ "${INST_TYPE}" == "bios" ]; then
      GRUB_PART="${disk_dev}$((++last_part))"
      GRUB_PART_N="${last_part}"
    fi

    BOOT_PART="${disk_dev}$((++last_part))"
    BOOT_PART_N="${last_part}"

    ROOT_PART="${disk_dev}$((++last_part))"
    ROOT_PART_N="${last_part}"

    [[ -n "${HOME_SIZE}" ]] && HOME_PART="${disk_dev}$((++last_part))"
    [[ -n "${HOME_SIZE}" ]] && HOME_PART_N="${last_part}"

    [[ -n "${VAR_SIZE}" ]] && VAR_PART="${disk_dev}$((++last_part))"
    [[ -n "${VAR_SIZE}" ]] && VAR_PART_N="${last_part}"
    ;;

  'volume_group' )
    INST_TYPE='bios'
    BOOT_DISK="/dev/mapper/${DEV}-${LABEL_UNDER}_boot"
    GRUB_PART="/dev/mapper/${DEV}-${LABEL_UNDER}_boot1"
    BOOT_PART="/dev/mapper/${DEV}-${LABEL_UNDER}_boot2"
    ROOT_PART="/dev/mapper/${DEV}-${LABEL_UNDER}_root"

    [[ -n "${HOME_SIZE}" ]] && HOME_PART="/dev/mapper/${DEV}-${LABEL_UNDER}_home"
    [[ -n "${VAR_SIZE}" ]] && VAR_PART="/dev/mapper/${DEV}-${LABEL_UNDER}_var"

    ;;

  'file' )
    INST_TYPE='bios'
    LOOP_DEV="$(losetup --find)"

    GRUB_PART="${LOOP_DEV}p1"
    GRUB_PART_N=1

    BOOT_PART="${LOOP_DEV}p2"
    BOOT_PART_N=2

    ROOT_PART="${LOOP_DEV}p3"
    ROOT_PART_N=3

    [[ -n "${HOME_SIZE}" ]] && HOME_PART="${LOOP_DEV}p4"
    [[ -n "${HOME_SIZE}" ]] && HOME_PART_N=4

    [[ -n "${VAR_SIZE}" ]] && VAR_PART="${LOOP_DEV}p5"
    [[ -n "${VAR_SIZE}" ]] && VAR_PART_N=5
    ;;
  esac

  # no idea why this is needed, but without it the script exits
  sleep 1
}

create_partitions() {
  if [ "${DEV_TYPE}" == 'volume_group' ] && [ -n "${DEV}" ]; then
    echo '+ creating logical volumes...'

    lvcreate -y -W y -L "${BOOT_SIZE}" "${DEV}" -n "${LABEL_UNDER}_boot"
    lvcreate -y -W y -L "${ROOT_SIZE}" "${DEV}" -n "${LABEL_UNDER}_root"

    [[ -n "${HOME_SIZE}" ]] \
      && lvcreate -y -W y -L "${HOME_SIZE}" "${DEV}" -n "${LABEL_UNDER}_home"

    [[ -n "${VAR_SIZE}" ]] \
      && lvcreate -y -W y -L "${VAR_SIZE}" "${DEV}" -n "${LABEL_UNDER}_var"

    sleep 0.5
    lvscan > /dev/null

    echo '+ creating boot disk...'

    sgdisk --zap-all "${BOOT_DISK}" && partsync
    sgdisk -g "${BOOT_DISK}" && partsync

    sgdisk --new "1::+2M" -u "1:${UUID_GRUB}" "${BOOT_DISK}" && partsync
    sgdisk -t "1:ef02" "${BOOT_DISK}" && partsync
    sgdisk -c "1:${LABEL}-grub" "${BOOT_DISK}" && partsync

    sgdisk --new "2:+2M:" -u "2:${UUID_BOOT}" "${BOOT_DISK}" && partsync
    sgdisk --attributes "2:set:2" "${BOOT_DISK}" && partsync
    sgdisk -c "2:${LABEL}-boot" "${BOOT_DISK}" && partsync

    return
  fi

  if [ "${DEV_TYPE}" == 'file' ]; then
    echo '+ preparing vm file...'
    qemu-img create -f raw "${DEV}" "$(( SIZE + 10*1024*1024 ))"
    sgdisk -g "${DEV}" && partsync
  fi

  partsync

  if [ "${INST_TYPE}" == 'bios' ]; then
    echo '+ creating grub partition...'
    sgdisk --new "${GRUB_PART_N}::+2M" \
      -u "${GRUB_PART_N}:${UUID_GRUB}" "${DEV}" && partsync

    # mark the grub partition as BIOS boot partition
    sgdisk -t "${GRUB_PART_N}:ef02" "${DEV}" && partsync

    # name the grub partition
    sgdisk -c "${GRUB_PART_N}:${LABEL}-grub" "${DEV}" && partsync
  fi


  echo '+ creating boot partition...'
  sgdisk --new "${BOOT_PART_N}:+2M:+${BOOT_SIZE}" \
    -u "${BOOT_PART_N}:${UUID_BOOT}" "${DEV}" && partsync

  if [ "${INST_TYPE}" == 'bios' ]; then
    # set legacy bios bootable attribute on boot device;
    # grub ignores it, but syslinux does not
    sgdisk --attributes "${BOOT_PART_N}:set:2" "${DEV}" && partsync

  elif [ "${INST_TYPE}" == 'uefi' ]; then
    # mark the boot partition as EFI system partition
    sgdisk -t "${BOOT_PART_N}:ef00" "${DEV}" && partsync
  fi

  # name the boot partition
  sgdisk -c "${BOOT_PART_N}:${LABEL}-boot" "${DEV}" && partsync


  echo '+ creating root partition...'
  sgdisk --new "${ROOT_PART_N}::+${ROOT_SIZE}" \
    -u "${ROOT_PART_N}:${UUID_ROOT}" "${DEV}" && partsync

  # name the root partition
  sgdisk -c "${ROOT_PART_N}:${LABEL}-root" "${DEV}" && partsync

  if [ ${ENCRYPT_ROOT} == 'false' ]; then
    # mark the root partition as linux filesystem
    sgdisk -t "${ROOT_PART_N}:8300" "${DEV}" && partsync
  else
    # mark the root partition as linux luks partition
    sgdisk -t "${ROOT_PART_N}:8309" "${DEV}" && partsync
  fi

  if [[ -n "${HOME_SIZE}" ]]; then
    echo '+ creating home partition...'
    sgdisk --new "${HOME_PART_N}::+${HOME_SIZE}" \
      -u "${HOME_PART_N}:${UUID_HOME}" "${DEV}" && partsync
    sgdisk -t "${HOME_PART_N}:8300" "${DEV}" && partsync
    sgdisk -c "${HOME_PART_N}:${LABEL}-home" "${DEV}" && partsync
  fi

  if [[ -n "${VAR_SIZE}" ]]; then
    echo '+ creating var partition...'
    sgdisk --new "${VAR_PART_N}::+${VAR_SIZE}" \
      -u "${VAR_PART_N}:${UUID_VAR}" "${DEV}" && partsync
    sgdisk -t "${VAR_PART_N}:8300" "${DEV}" && partsync
    sgdisk -c "${VAR_PART_N}:${LABEL}-var" "${DEV}" && partsync
  fi

  if [ "${DEV_TYPE}" == 'file' ]; then
    losetup -Pf "${DEV}"
  fi

  sleep 0.5
}

create_filesystems() {
  echo '+ creating boot filesystem...'
  if [ "${INST_TYPE}" == 'bios' ]; then
    mkfs.ext4 -F -L "${LABEL}-boot" -U "${UUID_BOOT}" "${BOOT_PART}"

  elif [ "${INST_TYPE}" == 'uefi' ]; then
    mkfs.fat -i "${UUID_BOOT_FAT}" -n "${LABEL}-boot" -F32 "${BOOT_PART}"
  fi

  if [ ${ENCRYPT_ROOT} == 'false' ]; then
    echo '+ creating root filesystem...'
    mkfs.ext4 -F -L "${LABEL}-root" -U "${UUID_ROOT}" "${ROOT_PART}"
  fi

  if [[ -n "${HOME_SIZE}" ]]; then
    echo '+ creating home filesystem...'
    if [ ${ENCRYPT_HOME} == 'false' ]; then
      mkfs.ext4 -F -L "${LABEL}-home" -U "${UUID_HOME}" "${HOME_PART}"
    elif [ ${ENCRYPT_HOME} == 'true' ]; then
      cryptsetup -v \
        --type luks2 \
        --cipher aes-xts-plain64 \
        --pbkdf argon2id \
        --hash sha512 \
        --key-size 512 \
        --iter-time 5000 \
        --batch-mode \
        --uuid="${UUID_HOME}" \
        luksFormat "${HOME_PART}"
      echo 'Enter the password again to mount encrypted home...'
      cryptsetup luksOpen --allow-discards "${HOME_PART}" ${MAP_DEV}
      mkfs.ext4 -F -L "${LABEL}-home" -U "${UUID_HOME}" "${PART_ENC}"
    fi
  fi

  if [ ${ENCRYPT_ROOT} == 'true' ]; then
    cryptsetup -v \
      --type luks2 \
      --cipher aes-xts-plain64 \
      --pbkdf argon2id \
      --hash sha512 \
      --key-size 512 \
      --iter-time 5000 \
      --batch-mode \
      --uuid="${UUID_ROOT}" \
      luksFormat "${ROOT_PART}"
    echo 'Enter the password again to mount encrypted root...'
    cryptsetup luksOpen --allow-discards "${ROOT_PART}" ${MAP_DEV}
    mkfs.ext4 -F -L "${MAP_DEV}" -U "${UUID_ROOT}" "${PART_ENC}"
  fi
      #--pbkdf pbkdf2 \

  if [[ -n "${VAR_SIZE}" ]]; then
    echo '+ creating var filesystem...'
    mkfs.ext4 -F -L "${LABEL}-var" -U "${UUID_VAR}" "${VAR_PART}"
  fi
}

mount_partitions() {
  echo '+ mounting partitions...'
  mkdir -p "${ROOT_DIR}"

  if [ "${ENCRYPT_ROOT}" == true ]; then
    mount -o sync "${PART_ENC}" "${ROOT_DIR}"
  else
    mount -o sync "${ROOT_PART}" "${ROOT_DIR}"
  fi

  mkdir -p ${ROOT_DIR}/{boot,home,var}
  mount -o sync "${BOOT_PART}" "${ROOT_DIR}/boot"

  if [[ -n "${HOME_SIZE}" ]]; then
    if [ "${ENCRYPT_HOME}" == true ]; then
      mount -o sync "${PART_ENC}" "${ROOT_DIR}/home"
    else
      mount -o sync "${HOME_PART}" "${ROOT_DIR}/home"
    fi
  fi

  if [[ -n "${VAR_SIZE}" ]]; then
    mount -o sync "${VAR_PART}" "${ROOT_DIR}/var"
  fi
}

set_fstab() {
  echo '+ configuring fstab...'

  local uuid_boot
  local boot_fs_type='ext4'

  if [ "${INST_TYPE}" == 'bios' ]; then
    uuid_boot="${UUID_BOOT}"

  elif [ "${INST_TYPE}" == 'uefi' ]; then
    uuid_boot="${UUID_BOOT_FAT^^}"
    uuid_boot="${uuid_boot:0:4}-${uuid_boot:4:8}"
    boot_fs_type='vfat'
  fi

  cat > ${ROOT_DIR}/etc/fstab << EOF
proc    /proc      proc    rw,nosuid,nodev,noexec,hidepid=2,gid=0  0 0
sys     /sys       sysfs   rw,nosuid,nodev,noexec                  0 0
run     /run       tmpfs   rw,nosuid,nodev,mode=0755               0 0
tmp     /tmp       tmpfs   rw,nosuid,nodev,mode=0777,size=80%      0 0

shm     /dev/shm   tmpfs   rw,nosuid,noexec,mode=1777              0 0
devpts  /dev/pts   devpts  rw,nosuid,noexec,mode=0620,gid=5        0 0
lock    /run/lock  tmpfs   rw,nosuid,nodev,noexec,mode=1777        0 0

UUID=${UUID_ROOT}  /      ext4  rw,lazytime,noiversion  0 1
UUID=${uuid_boot}  /boot  ${boot_fs_type}  rw,sync,noiversion      0 2
EOF

  if [ "${ENCRYPT_ROOT}" == true ]; then
    echo "${PART_ENC}        /      ext4  rw,lazytime,noiversion  0 1" >> ${ROOT_DIR}/etc/fstab
  else
    echo "UUID=${UUID_ROOT}  /      ext4  rw,lazytime,noiversion  0 1" >> ${ROOT_DIR}/etc/fstab
  fi

  echo "UUID=${uuid_boot}  /boot  ${boot_fs_type}  rw,sync,noiversion      0 2" >> ${ROOT_DIR}/etc/fstab

  if [[ -n "${HOME_SIZE}" ]] && [[ "${ENCRYPT_HOME}" == 'false' ]]; then
    echo "UUID=${UUID_HOME}  /home  ext4  rw,lazytime,noiversion  0 2" \
      >> ${ROOT_DIR}/etc/fstab
  fi

  if [[ -n "${VAR_SIZE}" ]]; then
    echo "UUID=${UUID_VAR}  /var   ext4  rw,lazytime,noiversion  0 2" \
      >> ${ROOT_DIR}/etc/fstab
  fi
}

set_timezone() {
  echo '+ configuring timezone...'
  ${CCMD} debconf-set-selections << EOF
tzdata tzdata/Areas select Europe
tzdata tzdata/Zones/Europe select Warsaw
EOF

  ${CCMD} rm -f /etc/localtime /etc/timezone
  ${CCMD} DEBCONF_NONINTERACTIVE_SEEN=true dpkg-reconfigure -f noninteractive tzdata
}

set_network() {
  echo '+ configuring network...'

  cat > ${ROOT_DIR}/etc/network/interfaces << EOF
auto lo
iface lo inet loopback
iface lo inet6 loopback
source /etc/network/interfaces.d/*
EOF

  if [[ ${STATIC_IP} == '' ]]; then

    # network config for dhcp
    cat > ${ROOT_DIR}/etc/network/interfaces.d/${IFACE} << EOF
allow-hotplug ${IFACE}
iface ${IFACE} inet dhcp
iface ${IFACE} inet6 auto
  dns-nameservers 9.9.9.9
EOF

  else

    # network config for static ip
    cat > ${ROOT_DIR}/etc/network/interfaces.d/${IFACE} << EOF
allow-hotplug ${IFACE}
iface ${IFACE} inet static
  address ${STATIC_IP}
  gateway ${STATIC_GW}
  dns-nameservers ${STATIC_GW}
EOF

    cat > ${ROOT_DIR}/etc/resolv.conf << EOF
nameserver ${STATIC_GW}
EOF
  fi

  cat > ${ROOT_DIR}/etc/hosts << EOF
127.0.0.1       localhost local debian
EOF
}

set_apt() {
  echo '+ configuring apt...'

  if [[ ${KALI} == 'false' ]]; then
    cat > ${ROOT_DIR}/etc/apt/sources.list << EOF
deb http://deb.debian.org/debian bookworm ${APT_REPOS}
deb http://deb.debian.org/debian-security/ bookworm-security ${APT_REPOS}
deb http://deb.debian.org/debian bookworm-updates ${APT_REPOS}
EOF
  else
    cat > ${ROOT_DIR}/etc/apt/sources.list << EOF
deb http://http.kali.org/kali kali-rolling ${APT_REPOS}
EOF
  fi

  cat > ${ROOT_DIR}/etc/apt/apt.conf.d/99norecommend << EOF
APT::Install-Recommends "0";
APT::Install-Suggests "0";
EOF

  ${CCMD} apt-get update

  if [[ ${KALI} == 'true' ]]; then
    ${CCMD} apt-get dist-upgrade -y
    sleep 1
    ${CCMD} apt-get install -y ca-certificates
  fi
}

set_locale() {
  echo '+ configuring locale...'
  ${CCMD} apt-get install -y locales
  ${CCMD} debconf-set-selections << EOF
locales locales/locales_to_be_generated multiselect en_US.UTF-8 UTF-8, pl_PL.UTF-8 UTF-8
locales locales/default_environment_locale select en_US.UTF-8
EOF

  ${CCMD} rm -f /etc/default/locale /etc/locale.gen
  ${CCMD} DEBCONF_NONINTERACTIVE_SEEN=true dpkg-reconfigure -f noninteractive locales
}

set_keyboard() {
  echo '+ configuring keyboard...'
  ${CCMD} apt-get install -y keyboard-configuration
  ${CCMD} debconf-set-selections << EOF
keyboard-configuration keyboard-configuration/layoutcode string pl
keyboard-configuration keyboard-configuration/xkb-keymap string pl
EOF

  ${CCMD} rm -f /etc/default/keyboard
  ${CCMD} DEBCONF_NONINTERACTIVE_SEEN=true dpkg-reconfigure -f noninteractive keyboard-configuration
}

install_bootloader() {
  echo '+ installing grub...'
  local dev
  case "${DEV_TYPE}" in
  'device'       ) dev=${DEV} ;;
  'volume_group' ) dev=${BOOT_DISK} ;;
  'file'         ) dev=${LOOP_DEV} ;;
  esac

  if [ "${INST_TYPE}" == 'bios' ]; then
    ${CCMD} apt-get -y install grub2
    ${CCMD} grub-install --target=i386-pc ${dev} --locales=

  elif [ "${INST_TYPE}" == 'uefi' ]; then
    ${CCMD} apt-get -y install grub-efi-amd64
    ${CCMD} grub-install --efi-directory=/boot --target=x86_64-efi --locales= --bootloader-id=debian
  fi

  # default linux cmdline parameters for grub
  local p
  if [ "${ENCRYPT_ROOT}" == true ]; then
    p="root=LABEL=${MAP_DEV}"
  else
    p="root=LABEL=${LABEL}-root"
  fi
  [[ ${DEV_TYPE} != 'device' ]] && p+=' nomodeset'
  p+=' console=ttyS0,115200n8'
  p+=' console=tty0'

  if [ "${ENCRYPT_ROOT}" == true ]; then
    echo "${MAP_DEV} PARTLABEL=${LABEL}-root none luks" > ${ROOT_DIR}/etc/crypttab
    ${CCMD} apt-get -y install cryptsetup-initramfs
    #${CCMD} update-initramfs -u
  fi

  sed -i \
    -e 's|^#GRUB_DISABLE_LINUX_UUID=|GRUB_DISABLE_LINUX_UUID=|' \
    -e 's|^#GRUB_TERMINAL=|GRUB_TERMINAL=|' \
    -e "s|^GRUB_CMDLINE_LINUX_DEFAULT=.*|GRUB_CMDLINE_LINUX_DEFAULT='$p'|" \
    ${ROOT_DIR}/etc/default/grub

  ${CCMD} update-grub
}

sys_config() {
  ${CCMD} sh -c 'echo root:root | chpasswd'

  sed -i 's|^#PermitRootLogin|PermitRootLogin|' ${ROOT_DIR}/etc/ssh/sshd_config
  rm ${ROOT_DIR}/etc/ssh/ssh_host_{ecdsa,rsa}_key*

  mkdir ${ROOT_DIR}/etc/systemd/system/getty@.service.d
  echo -e '[Service]\nTTYVTDisallocate=no' > ${ROOT_DIR}/etc/systemd/system/getty@.service.d/noclear.conf

  echo "${LABEL}" > ${ROOT_DIR}/etc/hostname
}

pkg_install() {
  ${CCMD} apt-get install -y python3
  [[ ${DEV_TYPE} != 'device' ]] && ${CCMD} apt-get install -y acpid

  [[ ${ENCRYPT_HOME} == 'true' ]] && ${CCMD} apt-get install -y cryptsetup

  ${CCMD} systemctl enable ssh
  ${CCMD} apt-get clean
}

deploy_ssh_key() {
  [[ -z ${PUB_SSH_FILE} ]] && return

  mkdir -p ${ROOT_DIR}/root/.ssh
  chmod 700 ${ROOT_DIR}/root/.ssh
  cat ${PUB_SSH_FILE} > ${ROOT_DIR}/root/.ssh/authorized_keys
}

unmount() {
  echo '+ unmounting...'

  echo 'unmounting virtual filesystems...'
  if [ "${INST_TYPE}" == 'uefi' ]; then
    ${CCMD} umount /sys/firmware/efi/efivars
  fi
  umount ${ROOT_DIR}/dev/pts && sleep 0.1
  umount ${ROOT_DIR}/{dev,sys} && sleep 0.1
  umount ${ROOT_DIR}/var/tmp && sleep 0.1

  if [[ -n "${HOME_SIZE}" ]]; then
    echo 'unmounting /home...'
    umount ${ROOT_DIR}/home && sleep 0.1
  fi

  if [[ -n "${VAR_SIZE}" ]]; then
    echo 'unmounting /var...'
    umount ${ROOT_DIR}/var && sleep 0.1
  fi

  echo 'unmounting /boot...'
  umount  ${ROOT_DIR}/boot && sleep 0.1

  echo 'unmounting /proc...'
  umount ${ROOT_DIR}/proc && sleep 0.1

  echo 'unmounting root...'
  umount  ${ROOT_DIR}/ && sleep 0.1

  # todo: add root
  if [ "${ENCRYPT_HOME}" == 'true' ]; then
    echo 'closing luks device...'
    cryptsetup luksClose ${MAP_DEV} && sleep 0.1
  fi

  if [ "${DEV_TYPE}" == 'file' ]; then
    echo 'removing loop device...'
    losetup -d "${LOOP_DEV}" && sleep 0.1
  fi

  echo done unmounting.
}


# confirmation
# ============

get_partitions

# get free space info early if we're not purging
if [ "${PURGE}" == 'false' ]; then
  get_free_space
fi

echo -e "target device/file   ${DEV}
device type          ${DEV_TYPE}
install type         ${INST_TYPE}

grub partition       ${GRUB_PART}
boot partition       ${BOOT_PART}
root partition       ${ROOT_PART}
home partition       ${HOME_PART}
var partition        ${VAR_PART}

boot size            ${BOOT_SIZE}
root size            ${ROOT_SIZE}
home size            ${HOME_SIZE}
var size             ${VAR_SIZE}

install size         $(numfmt --to=iec-i --suffix=B --format="%.2f" ${SIZE})"

if [ "${DEV_TYPE}" == 'device' ] && [ -n "${DEV}" ] && [ ${PURGE} == 'false' ]; then
  echo -n "free space           "
  numfmt --to=iec-i --suffix=B --format="%.2f" ${FREE_SPACE}
fi

if [ "${DEV_TYPE}" == 'volume_group' ] && [ -n "${DEV}" ]; then
  echo -n "free space           "
  numfmt --to=iec-i --suffix=B --format="%.2f" ${FREE_SPACE}
fi

if [[ "${PURGE}" == 'true' ]]; then
  echo -e "\nWARNING: This ${DEV_TYPE} is going to be wiped:\n${DEV}"
fi

echo -e '\nexisting disk layout:'
if [ -b "${DEV}" ]; then
  lsblk -o NAME,SIZE,FSUSED,TYPE,FSTYPE,MOUNTPOINT "${DEV}" \
    | tail -n +2
fi

if [[ ${YES} == 'false' ]]; then
  printf "\nPress 'Ctrl+c' to abort or 'Enter' to continue..."
  read
fi


# main
# =======

if [[ ${KALI} == 'true' ]]; then
  get_kali_keyring
fi

if [[ "${PURGE}" == 'true' ]]; then
  purge_partitions
  get_free_space
fi

# make sure that these global vars are readonly from now on
readonly BOOT_PART ROOT_PART HOME_PART VAR_PART LOOP_DEV INST_TYPE

if [[ -n "${BOOT_PART}" ]] && [[ -n "${ROOT_PART}" ]]; then
  create_partitions
fi

create_filesystems
mount_partitions

echo '+ installing...'
if [[ ${KALI} == 'false' ]]; then
  debootstrap \
    --arch amd64 \
    --include=vim,openssh-server,bridge-utils,dbus \
    bookworm ${ROOT_DIR} http://ftp.uk.debian.org/debian
else
  debootstrap \
    --arch amd64 \
    --include=vim,openssh-server,bridge-utils,dbus \
    --keyring=${TMP_DIR}/usr/share/keyrings/kali-archive-keyring.gpg \
    kali-last-snapshot ${ROOT_DIR} http://http.kali.org/kali
fi

mount --bind /dev ${ROOT_DIR}/dev
mount --bind /dev/pts ${ROOT_DIR}/dev/pts
mount --bind /proc ${ROOT_DIR}/proc
mount --bind /sys ${ROOT_DIR}/sys
mount --types tmpfs tmpfs ${ROOT_DIR}/var/tmp
if [ "${INST_TYPE}" == 'uefi' ]; then
  ${CCMD} mount -t efivarfs none /sys/firmware/efi/efivars
fi

set_fstab
set_timezone
set_network
set_apt
set_locale
set_keyboard

echo '+ installing kernel...'
${CCMD} apt-get -y --no-install-recommends install linux-image-amd64 zstd

install_bootloader
sys_config
pkg_install
deploy_ssh_key
unmount

rm -rf ${TMP_DIR}
sync
echo '+ done'

